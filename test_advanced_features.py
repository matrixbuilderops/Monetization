#!/usr/bin/env python3
"""
Advanced test script for the Python Code Generator
Tests multi-line input, context retention, and complex structure handling.
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from python_code_generator import PythonCodeGenerator

def test_multi_line_detection():
    """Test the multi-line input detection functionality."""
    print("Testing multi-line input detection...")
    
    generator = PythonCodeGenerator()
    
    # Test cases for complete vs incomplete structures
    test_cases = [
        # Complete structures (should return True)
        ("make a hello world program", True, "Simple request"),
        ('{"name": "John", "age": 30}', True, "Complete JSON"),
        ("[1, 2, 3, 4, 5]", True, "Complete list"),
        ("create a calculator", True, "Simple command"),
        
        # Incomplete structures (should return False)  
        ('{"name": "John",', False, "Incomplete JSON"),
        ("[1, 2, 3,", False, "Incomplete list"),
        ('"Hello world', False, "Unclosed string"),
    ]
    
    for text, expected, description in test_cases:
        result = generator.is_complete_structure(text)
        status = "‚úì" if result == expected else "‚ùå"
        print(f"  {status} {description}: '{text}' -> {result} (expected {expected})")
    
    return True

def test_filename_generation():
    """Test advanced filename generation."""
    print("\nTesting filename generation...")
    
    generator = PythonCodeGenerator()
    
    test_requests = [
        "make a hello world program",
        "create a complex calculator with scientific functions", 
        "generate a web scraper for news articles",
        "write a file organizer with GUI",
        "build a machine learning model for sentiment analysis"
    ]
    
    for request in test_requests:
        filename = generator.generate_filename(request)
        print(f"  '{request}' -> '{filename}'")
    
    return True

def test_code_extraction():
    """Test advanced code extraction from various response formats."""
    print("\nTesting code extraction...")
    
    generator = PythonCodeGenerator()
    
    # Test case 1: Standard markdown code block
    response1 = """Here's a simple hello world program:

```python
print("Hello, World!")
print("This is a generated script")
if __name__ == "__main__":
    main()
```

This code will print a greeting message."""
    
    # Test case 2: Code without markdown
    response2 = """print("Hello from test!")
# This is a comment
x = 42
print(f"The answer is {x}")"""
    
    # Test case 3: Mixed content
    response3 = """Let me create that for you:

```python
import os
import sys

def main():
    print("Starting the application...")
    return True

if __name__ == "__main__":
    main()
```

Hope this helps!"""
    
    test_cases = [
        (response1, "Standard markdown"),
        (response2, "Plain code"),
        (response3, "Mixed content"),
    ]
    
    for response, description in test_cases:
        extracted = generator.extract_python_code(response)
        print(f"  {description}:")
        print(f"    Extracted {len(extracted.split())} lines of code")
        if extracted:
            first_line = extracted.split('\n')[0]
            print(f"    First line: {first_line}")
    
    return True

def test_file_operations():
    """Test file saving and directory operations."""
    print("\nTesting file operations...")
    
    generator = PythonCodeGenerator()
    
    # Test saving code
    test_code = '''#!/usr/bin/env python3
"""
Test script generated by Python Code Generator
"""

def main():
    print("This is a test script")
    print("Generated automatically")

if __name__ == "__main__":
    main()
'''
    
    # Test saving
    success = generator.save_code(test_code, "test_advanced.py")
    print(f"  Save test: {'‚úì Success' if success else '‚ùå Failed'}")
    
    # Test directory change
    import tempfile
    with tempfile.TemporaryDirectory() as temp_dir:
        generator.set_output_directory(temp_dir)
        success2 = generator.save_code(test_code, "test_temp.py")
        print(f"  Directory change test: {'‚úì Success' if success2 else '‚ùå Failed'}")
    
    return True

def main():
    """Run all advanced tests."""
    print("üß™ Advanced Python Code Generator Tests")
    print("=" * 50)
    
    tests = [
        test_multi_line_detection,
        test_filename_generation, 
        test_code_extraction,
        test_file_operations,
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test failed with error: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    passed = sum(results)
    total = len(results)
    print(f"Tests passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ All tests passed!")
        return True
    else:
        print("‚ö†Ô∏è  Some tests failed.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)