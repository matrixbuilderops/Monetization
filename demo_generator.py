#!/usr/bin/env python3
"""
Demo script showing the Python Code Generator in action
This uses mock responses to demonstrate functionality without requiring Ollama
"""

import sys
import os
from pathlib import Path
sys.path.append(os.path.dirname(__file__))

from python_code_generator import PythonCodeGenerator

class MockPythonCodeGenerator(PythonCodeGenerator):
    """Mock version that simulates model responses for demo purposes."""
    
    def __init__(self):
        super().__init__()
        self.mock_responses = {
            "hello world": '''Here's a simple hello world program:

```python
#!/usr/bin/env python3
"""
Simple Hello World Program
Generated by AI Assistant
"""

def main():
    print("Hello, World!")
    print("Welcome to Python programming!")
    
    # Get user's name
    name = input("What's your name? ")
    print(f"Nice to meet you, {name}!")

if __name__ == "__main__":
    main()
```

This program prints a greeting and asks for the user's name.''',
            
            "calculator": '''Here's a simple calculator program:

```python
#!/usr/bin/env python3
"""
Simple Calculator
Performs basic arithmetic operations
"""

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    if y == 0:
        return "Error: Division by zero!"
    return x / y

def main():
    print("Simple Calculator")
    print("Select operation:")
    print("1. Add")
    print("2. Subtract")
    print("3. Multiply")
    print("4. Divide")
    
    while True:
        choice = input("Enter choice (1/2/3/4) or 'q' to quit: ")
        
        if choice == 'q':
            break
            
        if choice in ['1', '2', '3', '4']:
            try:
                num1 = float(input("Enter first number: "))
                num2 = float(input("Enter second number: "))
                
                if choice == '1':
                    print(f"Result: {add(num1, num2)}")
                elif choice == '2':
                    print(f"Result: {subtract(num1, num2)}")
                elif choice == '3':
                    print(f"Result: {multiply(num1, num2)}")
                elif choice == '4':
                    print(f"Result: {divide(num1, num2)}")
                    
            except ValueError:
                print("Invalid input! Please enter numbers only.")
        else:
            print("Invalid input! Please select 1, 2, 3, or 4.")

if __name__ == "__main__":
    main()
```''',
            
            "file organizer": '''Here's a file organizer script:

```python
#!/usr/bin/env python3
"""
File Organizer Script
Organizes files in a directory by extension
"""

import os
import shutil
from pathlib import Path

def organize_files(source_dir, create_folders=True):
    """
    Organize files in a directory by their extensions.
    
    Args:
        source_dir (str): Path to the directory to organize
        create_folders (bool): Whether to create new folders for each extension
    """
    source_path = Path(source_dir)
    
    if not source_path.exists():
        print(f"Directory {source_dir} does not exist!")
        return
    
    # Extension to folder mapping
    extension_folders = {
        '.txt': 'Text_Files',
        '.pdf': 'PDF_Files',
        '.jpg': 'Images',
        '.jpeg': 'Images',
        '.png': 'Images',
        '.gif': 'Images',
        '.mp4': 'Videos',
        '.avi': 'Videos',
        '.mov': 'Videos',
        '.mp3': 'Audio',
        '.wav': 'Audio',
        '.doc': 'Documents',
        '.docx': 'Documents',
        '.xls': 'Spreadsheets',
        '.xlsx': 'Spreadsheets',
        '.py': 'Python_Scripts',
        '.js': 'JavaScript',
        '.html': 'Web_Files',
        '.css': 'Web_Files'
    }
    
    print(f"Organizing files in: {source_path}")
    
    for file_path in source_path.iterdir():
        if file_path.is_file():
            extension = file_path.suffix.lower()
            
            # Determine target folder
            if extension in extension_folders:
                folder_name = extension_folders[extension]
            else:
                folder_name = 'Other_Files'
            
            # Create target folder if it doesn't exist
            target_folder = source_path / folder_name
            if create_folders and not target_folder.exists():
                target_folder.mkdir()
                print(f"Created folder: {folder_name}")
            
            # Move file
            if target_folder.exists():
                target_path = target_folder / file_path.name
                try:
                    shutil.move(str(file_path), str(target_path))
                    print(f"Moved: {file_path.name} -> {folder_name}/")
                except Exception as e:
                    print(f"Error moving {file_path.name}: {e}")

def main():
    print("File Organizer Script")
    print("====================")
    
    # Get directory from user
    while True:
        directory = input("Enter the directory path to organize (or 'q' to quit): ").strip()
        
        if directory.lower() == 'q':
            break
            
        if directory:
            organize_files(directory)
            print("Organization complete!")
        else:
            print("Please enter a valid directory path.")

if __name__ == "__main__":
    main()
```'''
        }
    
    def call_model(self, prompt: str) -> str:
        """Mock model call that returns predefined responses."""
        prompt_lower = prompt.lower()
        
        # Find the best matching response
        for key, response in self.mock_responses.items():
            if key in prompt_lower:
                return response
        
        # Default response for unknown requests
        return '''Here's a simple Python script:

```python
#!/usr/bin/env python3
"""
Generated Python Script
"""

def main():
    print("This is a generated Python script")
    print("Modify this code to suit your needs")

if __name__ == "__main__":
    main()
```'''

def demo():
    """Demonstrate the code generator functionality."""
    print("üêç Python Code Generator Demo")
    print("=" * 50)
    print("This demo shows how the interactive code generator works.")
    print("It uses mock AI responses to demonstrate the functionality.")
    print("")
    
    generator = MockPythonCodeGenerator()
    
    # Demo requests
    demo_requests = [
        "make a hello world program",
        "create a simple calculator",
        "generate a file organizer script"
    ]
    
    for i, request in enumerate(demo_requests, 1):
        print(f"\n{i}. Demo Request: '{request}'")
        print("-" * 40)
        
        # Process the request
        generator.process_request(request)
        
        input("\nPress Enter to continue to next demo...")
    
    print("\n‚úì Demo completed!")
    print(f"Check the '{generator.output_dir}' directory for generated scripts.")
    
    # Show generated files
    if generator.output_dir.exists():
        files = list(generator.output_dir.glob("*.py"))
        print(f"\nGenerated files ({len(files)}):")
        for file_path in files:
            print(f"  - {file_path.name}")

if __name__ == "__main__":
    demo()